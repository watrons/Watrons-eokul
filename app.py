import os
import json
import gdown
import requests
import sqlite3
import re
from flask import Flask, jsonify
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
import threading
import logging
import traceback

# Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# Zorunlu kanallar
REQUIRED_CHANNELS = ["@nabisystem", "@watronschecker"]

# Google Drive File ID
DRIVE_FILE_ID = "1jqHxXLH8-7qj1mCHVtJg-H3XjbQXz5EN"
DRIVE_URL = f"https://drive.google.com/uc?id={DRIVE_FILE_ID}"

# Database i√ßin
def init_db():
    try:
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                remaining_searches INTEGER DEFAULT 3,
                invited_users INTEGER DEFAULT 0,
                total_invites INTEGER DEFAULT 0,
                bonus_received BOOLEAN DEFAULT FALSE
            )
        ''')
        conn.commit()
        conn.close()
        logger.info("‚úÖ Kullanƒ±cƒ± database tablosu olu≈üturuldu")
    except Exception as e:
        logger.error(f"‚ùå Database hatasƒ±: {e}")

def get_user_data(user_id):
    try:
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()
        
        if not user:
            cursor.execute('''
                INSERT INTO users (user_id, remaining_searches, invited_users, total_invites, bonus_received) 
                VALUES (?, ?, ?, ?, ?)
            ''', (user_id, 3, 0, 0, False))
            conn.commit()
            cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
            user = cursor.fetchone()
        
        conn.close()
        
        if user:
            return {
                'user_id': user[0],
                'remaining_searches': user[1],
                'invited_users': user[2],
                'total_invites': user[3],
                'bonus_received': bool(user[4])
            }
        else:
            return {
                'user_id': user_id,
                'remaining_searches': 3,
                'invited_users': 0,
                'total_invites': 0,
                'bonus_received': False
            }
            
    except Exception as e:
        logger.error(f"‚ùå get_user_data hatasƒ±: {e}")
        return {
            'user_id': user_id,
            'remaining_searches': 3,
            'invited_users': 0,
            'total_invites': 0,
            'bonus_received': False
        }

def update_user_searches(user_id, new_count):
    try:
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET remaining_searches = ? WHERE user_id = ?', (new_count, user_id))
        conn.commit()
        conn.close()
        logger.info(f"‚úÖ Kullanƒ±cƒ± {user_id} sorgu hakkƒ± g√ºncellendi: {new_count}")
    except Exception as e:
        logger.error(f"‚ùå update_user_searches hatasƒ±: {e}")

def add_invite(user_id):
    try:
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        
        cursor.execute('SELECT invited_users, bonus_received FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        
        if result:
            current_invites = result[0]
            bonus_received = bool(result[1])
            new_invites = current_invites + 1
            
            logger.info(f"üì® Davet ekleniyor: {user_id} -> {current_invites} -> {new_invites}")
            
            cursor.execute('UPDATE users SET invited_users = ?, total_invites = total_invites + 1 WHERE user_id = ?', 
                          (new_invites, user_id))
            
            if new_invites >= 3 and not bonus_received:
                cursor.execute('SELECT remaining_searches FROM users WHERE user_id = ?', (user_id,))
                current_searches = cursor.fetchone()[0]
                new_searches = current_searches + 30
                
                cursor.execute('UPDATE users SET remaining_searches = ?, bonus_received = TRUE WHERE user_id = ?', 
                              (new_searches, user_id))
                conn.commit()
                conn.close()
                logger.info(f"üéâ Kullanƒ±cƒ± {user_id} 30 sorgu hakkƒ± bonusu kazandƒ±! Yeni hak: {new_searches}")
                return True
            
            conn.commit()
            conn.close()
            logger.info(f"‚úÖ Kullanƒ±cƒ± {user_id} davet sayƒ±sƒ± g√ºncellendi: {new_invites}")
        
        return False
        
    except Exception as e:
        logger.error(f"‚ùå add_invite hatasƒ±: {e}")
        return False

# SQL dosyasƒ±nƒ± indirme ve i≈üleme
def download_sql_file():
    sql_path = "eokul_data.sql"
    
    try:
        logger.info(f"üì• SQL dosyasƒ± indiriliyor: {DRIVE_URL}")
        
        gdown.download(DRIVE_URL, sql_path, quiet=False)
        
        if os.path.exists(sql_path) and os.path.getsize(sql_path) > 0:
            file_size = os.path.getsize(sql_path)
            logger.info(f"‚úÖ SQL dosyasƒ± indirildi! Boyut: {file_size} bytes")
            return True
        else:
            logger.error("‚ùå SQL dosyasƒ± indirilemedi!")
            return False
            
    except Exception as e:
        logger.error(f"üö® SQL indirme hatasƒ±: {e}")
        return False

def search_by_tc(tc_number):
    """TC'ye g√∂re SQL dosyasƒ±nda arama yap ve JSON d√∂nd√ºr"""
    try:
        if not download_sql_file():
            return "SQL dosyasƒ± y√ºklenemedi"
        
        # SQL dosyasƒ±nƒ± oku
        with open('eokul_data.sql', 'r', encoding='utf-8') as f:
            sql_content = f.read()
        
        # TC'yi ara
        results = []
        lines = sql_content.strip().split('\n')
        
        for line in lines:
            line = line.strip()
            # Python tuple formatƒ±nƒ± ara: (id, 'tc', ...)
            if f"'{tc_number}'" in line and line.startswith('(') and line.endswith('),'):
                # Satƒ±rƒ± parse et
                clean_line = line[1:-2]  # Parantezleri ve virg√ºl√º kaldƒ±r
                values = [v.strip().strip("'") for v in clean_line.split(',')]
                
                if len(values) >= 6:
                    result = {
                        'id': values[0],
                        'tc_kimlik': values[1],
                        'okul_no': values[2],
                        'ad': values[3],
                        'soyad': values[4],
                        'durum': values[5]
                    }
                    results.append(result)
        
        logger.info(f"‚úÖ {len(results)} kayƒ±t bulundu, JSON formatƒ±nda d√∂nd√ºr√ºl√ºyor")
        return results
        
    except Exception as e:
        logger.error(f"‚ùå Arama hatasƒ±: {e}")
        return f"Hata: {e}"

# Flask routes
@app.route('/')
def home():
    sql_loaded = os.path.exists('eokul_data.sql')
    return jsonify({
        "status": "active", 
        "message": "E-Okul Sorgulama Bot API",
        "sql_loaded": sql_loaded,
        "bot_type": "TC'den √∂ƒürenci bilgisi sorgulama",
        "drive_file_id": DRIVE_FILE_ID
    })

@app.route('/health')
def health():
    sql_status = download_sql_file()
    file_size = os.path.getsize('eokul_data.sql') if sql_status else 0
    
    return jsonify({
        "status": "healthy" if sql_status else "error",
        "sql_downloaded": sql_status,
        "sql_size": file_size,
        "results_format": "JSON"
    })

@app.route('/test-search/<tc>')
def test_search(tc):
    """Test i√ßin arama endpoint'i"""
    results = search_by_tc(tc)
    
    if isinstance(results, str):
        return jsonify({"error": results})
    
    return jsonify({
        "tc": tc,
        "result_count": len(results),
        "results": results,
        "format": "JSON"
    })

# Telegram Bot
def run_telegram_bot():
    try:
        BOT_TOKEN = os.getenv('BOT_TOKEN', '8370536277:AAGaB56GBjMUHsx5X0BS3_FXahtuPloLo6A')
        
        application = Application.builder().token(BOT_TOKEN).build()
        
        async def check_channel_membership(update: Update, context: ContextTypes.DEFAULT_TYPE):
            user_id = update.effective_user.id
            missing_channels = []
            
            for channel in REQUIRED_CHANNELS:
                try:
                    member = await context.bot.get_chat_member(chat_id=channel, user_id=user_id)
                    if member.status not in ['member', 'administrator', 'creator']:
                        missing_channels.append(channel)
                except Exception as e:
                    missing_channels.append(channel)
            
            return missing_channels

        async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            user_id = update.effective_user.id
            
            # Referans i≈ülemi
            if context.args:
                try:
                    referrer_id = int(context.args[0])
                    if referrer_id != user_id:
                        bonus_verildi = add_invite(referrer_id)
                        if bonus_verildi:
                            await context.bot.send_message(
                                referrer_id,
                                "üéâ **TEBRƒ∞KLER! 3 Kƒ∞≈ûƒ∞ DAVET ETTƒ∞Nƒ∞Z!**\n\n"
                                "‚úÖ **30 SORGU HAKKI** kazandƒ±nƒ±z!\n\n"
                                "@nabisystem @watronschecker"
                            )
                except ValueError:
                    pass
            
            # Kanal kontrol√º
            missing_channels = await check_channel_membership(update, context)
            
            if missing_channels:
                buttons = []
                for channel in missing_channels:
                    buttons.append([InlineKeyboardButton(f"üì¢ {channel} Katƒ±l", url=f"https://t.me/{channel[1:]}")])
                buttons.append([InlineKeyboardButton("‚úÖ Kontrol Et", callback_data="check_membership")])
                reply_markup = InlineKeyboardMarkup(buttons)
                
                await update.message.reply_text(
                    "‚ùå **Kanal √úyeliƒüi Gerekli**\n\n"
                    "Botu kullanmak i√ßin kanallara katƒ±lmanƒ±z gerekiyor!\n\n"
                    "Kanallara katƒ±ldƒ±ktan sonra '‚úÖ Kontrol Et' butonuna tƒ±klayƒ±n.",
                    reply_markup=reply_markup
                )
                return
            
            # Ana men√º
            user_data = get_user_data(user_id)
            await update.message.reply_text(
                f"üéì **E-Okul Sorgulama Botu**\n\n"
                f"**Kalan Sorgu Hakkƒ±:** {user_data['remaining_searches']}\n"
                f"**Davet Edilen:** {user_data['invited_users']}/3 ki≈üi\n"
                f"**Bonus Durumu:** {'‚úÖ 30 HAK KAZANILDI' if user_data['bonus_received'] else '‚ùå 30 HAK BEKLƒ∞YOR'}\n\n"
                "**Komutlar:**\n"
                "‚Ä¢ `/sorgu 12345678901` - TC'den √∂ƒürenci bilgisi\n"
                "‚Ä¢ `/referans` - Davet linkini al\n\n"
                "üéâ **3 arkada≈üƒ±nƒ± davet et, 30 SORGU HAKKI kazan!**\n\n"
                "@nabisystem @watronschecker"
            )

        async def sorgu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            user_id = update.effective_user.id
            
            # Kanal kontrol√º
            missing_channels = await check_channel_membership(update, context)
            if missing_channels:
                await update.message.reply_text("‚ùå √ñnce t√ºm kanallara katƒ±lmalƒ±sƒ±nƒ±z! /start")
                return
            
            user_data = get_user_data(user_id)
            
            if user_data['remaining_searches'] <= 0:
                await update.message.reply_text(
                    "‚ùå **Sorgu hakkƒ±nƒ±z kalmadƒ±!**\n\n"
                    "Yeni hak kazanmak i√ßin 3 arkada≈üƒ±nƒ±zƒ± davet edin:\n"
                    "`/referans`\n\n"
                    "üéâ **3 davet = 30 SORGU HAKKI!**\n\n"
                    "@nabisystem @watronschecker"
                )
                return
            
            if not context.args:
                await update.message.reply_text("‚ùå **Doƒüru kullanƒ±m:** `/sorgu 12345678901`")
                return
            
            tc = context.args[0]
            
            if not tc.isdigit() or len(tc) != 11:
                await update.message.reply_text("‚ùå Ge√ßersiz TC kimlik numarasƒ±! 11 haneli numara girin.")
                return
            
            # Hak sayƒ±sƒ±nƒ± g√ºncelle
            update_user_searches(user_id, user_data['remaining_searches'] - 1)
            
            await update.message.reply_text("üîç √ñƒürenci bilgileri aranƒ±yor...")
            
            # Arama yap - SONU√áLAR JSON OLARAK GELƒ∞YOR
            sonuclar = search_by_tc(tc)
            
            if isinstance(sonuclar, str):
                await update.message.reply_text(f"‚ùå {sonuclar}")
                return
            
            if not sonuclar:
                await update.message.reply_text(f"‚ùå **{tc}** numarasƒ±na ait √∂ƒürenci bulunamadƒ±.")
                return
            
            # JSON formatƒ±ndaki sonu√ßlarƒ± g√∂ster
            for i, kayit in enumerate(sonuclar[:5]):  # ƒ∞lk 5 kaydƒ± g√∂ster
                mesaj = (
                    f"**üéì √ñƒürenci {i+1}:**\n"
                    f"**TC:** `{kayit['tc_kimlik']}`\n"
                    f"**Ad Soyad:** {kayit['ad']} {kayit['soyad']}\n"
                    f"**Okul No:** {kayit['okul_no']}\n"
                    f"**Durum:** {kayit['durum']}\n"
                    f"**Kayƒ±t ID:** {kayit['id']}\n\n"
                    "üìä *JSON formatƒ±nda* üìä\n"
                    "@nabisystem @watronschecker"
                )
                await update.message.reply_text(mesaj)
            
            # Kalan haklarƒ± g√∂ster
            user_data = get_user_data(user_id)
            await update.message.reply_text(
                f"‚úÖ **Arama tamamlandƒ±!**\n"
                f"**Kalan Sorgu Hakkƒ±:** {user_data['remaining_searches']}\n"
                f"**Bulunan Kayƒ±t:** {len(sonuclar)} adet\n"
                f"**Format:** JSON\n\n"
                "@nabisystem @watronschecker"
            )

        async def referans_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            user_id = update.effective_user.id
            
            # Kanal kontrol√º
            missing_channels = await check_channel_membership(update, context)
            if missing_channels:
                await update.message.reply_text("‚ùå √ñnce t√ºm kanallara katƒ±lmalƒ±sƒ±nƒ±z! /start")
                return
            
            user_data = get_user_data(user_id)
            
            bot_username = (await context.bot.get_me()).username
            invite_link = f"https://t.me/{bot_username}?start={user_id}"
            
            # Davet durumuna g√∂re mesaj
            if user_data['bonus_received']:
                bonus_text = "‚úÖ **30 SORGU HAKKI ZATEN KAZANILDI!**"
                info_text = "üéâ Bonusu zaten aldƒ±nƒ±z! Yeni davetler i√ßin te≈üekk√ºrler."
            elif user_data['invited_users'] >= 3:
                bonus_text = "‚úÖ **30 SORGU HAKKI HAK EDƒ∞LDƒ∞!**"
                info_text = "üéâ 3 ki≈üi davet ettiniz! Bonus otomatik olarak eklendi."
            else:
                kalan = 3 - user_data['invited_users']
                bonus_text = f"‚ùå **{kalan} ki≈üi kaldƒ±!**"
                info_text = f"üî• {kalan} ki≈üi daha davet ederek 30 SORGU HAKKI kazan!"
            
            await update.message.reply_text(
                f"üì® **REFERANS Sƒ∞STEMƒ∞**\n\n"
                f"**Davet Durumu:** {user_data['invited_users']}/3 ki≈üi\n"
                f"**Toplam Davet:** {user_data['total_invites']} ki≈üi\n"
                f"**Bonus:** {bonus_text}\n\n"
                f"{info_text}\n\n"
                f"**Davet Linkiniz:**\n`{invite_link}`\n\n"
                "üìç **Nasƒ±l √áalƒ±≈üƒ±r?**\n"
                "1. Linki arkada≈ülarƒ±nƒ±za g√∂nderin\n"
                "2. Onlar botu kullanmaya ba≈ülasƒ±n\n"
                "3. 3 ki≈üi tamamlayƒ±nca 30 HAK kazanƒ±n!\n\n"
                "@nabisystem @watronschecker"
            )

        async def check_membership_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
            query = update.callback_query
            await query.answer()
            
            missing_channels = await check_channel_membership(update, context)
            
            if not missing_channels:
                await query.edit_message_text("‚úÖ **T√ºm kanallara katƒ±lƒ±m onaylandƒ±!**\n\nBotu kullanmaya ba≈ülayabilirsiniz.")
                await start_command(update, context)
            else:
                await query.edit_message_text("‚ùå **Hala kanallara katƒ±lmadƒ±nƒ±z!** L√ºtfen /start komutu ile tekrar deneyin.")

        # Handlers
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("sorgu", sorgu_command))
        application.add_handler(CommandHandler("referans", referans_command))
        application.add_handler(CallbackQueryHandler(check_membership_callback, pattern="check_membership"))
        
        logger.info("ü§ñ E-Okul Bot ba≈ülatƒ±lƒ±yor...")
        application.run_polling()
        
    except Exception as e:
        logger.error(f"‚ùå Bot hatasƒ±: {e}")

# Uygulamayƒ± ba≈ülat
if __name__ == '__main__':
    # Database'i ba≈ülat
    init_db()
    
    # SQL dosyasƒ±nƒ± √∂nceden indir
    logger.info("üì• SQL dosyasƒ± indiriliyor...")
    download_sql_file()
    
    # Bot'u thread'te ba≈ülat
    bot_thread = threading.Thread(target=run_telegram_bot)
    bot_thread.daemon = True
    bot_thread.start()
    
    # Flask'ƒ± ba≈ülat
    port = int(os.environ.get('PORT', 5000))
    logger.info(f"üåê Flask API ba≈ülatƒ±lƒ±yor: port {port}")
    app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)
